@using BattleFactoryBlindPracticer.Model;
<style>
    .answer-pokemon-grid-item{grid-area: answer-pokemon-grid-item;}
    .guess-pokemon-grid-item{grid-area: guess-pokemon-grid-item;}
    .guess-inputbox-item{grid-area: guess-inputbox-item;}
    .confirm-button-item{grid-area: confirm-button-item;}

    .grid-container {
        display: grid;
        grid-template-areas: 
            'guess-pokemon-grid-item answer-pokemon-grid-item'
            'guess-inputbox-item guess-inputbox-item'
            'confirm-button-item confirm-button-item';
        padding: 10px;
        width: 35%;
    }

    .grid-container > div{
        text-align: center;
    }

    .sprite { grid-area: sprite; }
    .cryButton { grid-area: cryButton;}
    .types { grid-area: types; }

    .pokemon-container{
        display: grid;
        grid-template-areas: 
            'sprite sprite'
            'sprite sprite'
            'types types'
            'cryButton cryButton';
        gap: 1px;
        background-color:white;
        padding: 1px;
    }

    .pokemon-container > div {
        background-color: rgba(255, 255, 255, 0.8);
        text-align: center;
        padding: 2px;
        margin: 2px;
    }

    .confirm-button{ grid-area: confirm-button;}
    .guess-inputbox{ grid-area: guess-inputbox;}

    .input-container{
        display: grid;
        grid-template-areas: 'confirm-button guess-inputbox';
    }

    #confirm-button{
        display: block;
        width: 90%;
        margin-left: 5%;
        margin-right: 5%;
    }
</style>


<div class="grid-container">
    <div class="guess-pokemon-grid-item">
        <div class="pokemon-container" id="GuessPokemon">
            <div class="sprite">
                <SpriteComponent Height="128" Width="128" IsGuessable=false pokedexNumber="@guessPokemon.PokedexNumber" @ref="@pokemonGuess_SpriteComponent" />
            </div>
            <div class="cryButton">
                <CryButton IsDisabled=true pokedexNumber="@guessPokemon.PokedexNumber" @ref="@pokemonGuess_CryButton" />
            </div>
            <div class="types">
                <TypeImageComponent IsShown=true PokemonType="@guessPokemon.Type1" @ref="@pokemonGuess_TypeImageComponent1" />
                <TypeImageComponent IsShown=true PokemonType="@guessPokemon.Type2" @ref="@pokemonGuess_TypeImageComponent2" />
            </div>
        </div>
    </div>
    <div class="answer-pokemon-grid-item">
        <div class="pokemon-container" id="AnswerPokemon">
            <div class="sprite">
                <SpriteComponent Height="128" Width="128" pokedexNumber="@AnswerPokedexNumber" @ref="@pokemonAnswer_SpriteComponent" />
            </div>
            <div class="cryButton">
                <CryButton IsDisabled=false pokedexNumber="@AnswerPokedexNumber" @ref="@pokemonAnswer_CryButton" />
            </div>
            <div class="types">
                <TypeImageComponent IsShown=false PokemonType="@answerPokemon.Type1" @ref="pokemonAnswer_TypeImageComponent1" />
                <TypeImageComponent IsShown=false PokemonType="@answerPokemon.Type2" @ref="pokemonAnswer_TypeImageComponent2" />
            </div>
        </div>
    </div>
    <div class="guess-inputbox-item">
        <GuessComponent IsGuessable=true GuessString="@answerPokemon.Name" OptionList="@optionList" @ref="@pokemonNameGuessComponent" />
    </div>
    <div class="confirm-button-item">
        <button id="confirm-button" @onclick="ConfirmClick" disabled="@ConfirmDisabled">
            Confirm
        </button>
    </div>
</div>

@code {
    [Parameter]
    public int AnswerPokedexNumber { get; set; } = 0;

    [Parameter]
    public List<Pokemon> Pokemons { get; set; } = new();

    private Pokemon answerPokemon { get; set; } = new();
    private Pokemon guessPokemon { get; set; } = new();
    private List<string> optionList { get; set; } = new();

    private SpriteComponent pokemonGuess_SpriteComponent { get; set; } = new();
    private CryButton pokemonGuess_CryButton { get; set; } = new();
    private TypeImageComponent pokemonGuess_TypeImageComponent1 { get; set; } = new();
    private TypeImageComponent pokemonGuess_TypeImageComponent2 { get; set; } = new();

    private SpriteComponent pokemonAnswer_SpriteComponent { get; set; } = new();
    private CryButton pokemonAnswer_CryButton { get; set; } = new();
    private TypeImageComponent pokemonAnswer_TypeImageComponent1 { get; set; } = new();
    private TypeImageComponent pokemonAnswer_TypeImageComponent2 { get; set; } = new();

    private GuessComponent pokemonNameGuessComponent { get; set; } = new();
    private bool ConfirmDisabled = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        guessPokemon.GetEmptyPokemon();
    }
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Pokemons.TryGetPokemonByDexNumber(AnswerPokedexNumber, out Pokemon pokemon))
        {
            answerPokemon = pokemon;
        }
        else
        {
            answerPokemon.Type1 = "None";
            answerPokemon.Type2 = "None";
        }
        CreateOptionList();
        StateHasChanged();
    }

    public void ResetComponent()
    {

    }

    private void CreateOptionList()
    {
        optionList.Clear();
        foreach(Pokemon p in Pokemons)
        {
            optionList.Add(p.Name);
        }
    }

    private void ConfirmClick()
    {
        pokemonNameGuessComponent.HandleGuessCheck();
        if (Pokemons.TryGetPokemonByName(pokemonNameGuessComponent.GetInputValue(), out Pokemon pokemon))
        {
            guessPokemon = pokemon;
        }
        ShowGuess();
        RevealAnswer();
        ConfirmDisabled = true;
        StateHasChanged();
    }

    private void RevealAnswer()
    {
        pokemonAnswer_SpriteComponent.ShowSprite();
        pokemonAnswer_TypeImageComponent1.ShowType();
        pokemonAnswer_TypeImageComponent2.ShowType();
    }

    private void ShowGuess()
    {
        pokemonGuess_SpriteComponent.ShowSprite();
        pokemonGuess_CryButton.EnableButton();
        pokemonGuess_TypeImageComponent1.ShowType();
        pokemonGuess_TypeImageComponent2.ShowType();
    }
}
