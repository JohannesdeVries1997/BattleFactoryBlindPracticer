@using System.Text.RegularExpressions;
<style>
    .InputBoxMoves{
        border-block-width: 4px;
        margin-top: 5px;
        margin-bottom: 5px;
    }
</style>


<input type="text" class="InputBoxMoves" list="@Move" style="@inputBoxStyling" @bind="inputValue" @bind:event="oninput" disabled="@inputBoxDisabled" onclick="this.select()" />
<input type="text" class="InputBoxMoves" value="@displayedMove" disabled>

<datalist id="@Move">
    @foreach (string s in autoCompleteMoves)
    {
        <option>@s</option>
    }
</datalist>


@code {
    [Parameter]
    public bool IsGuessable { get; set; } = false;

    private bool inputBoxDisabled = true;

    [Parameter]
    public string Move { get; set; } = string.Empty;

    [Parameter]
    public List<string> PossibleMoves { get; set; } = new();

    private List<string> autoCompleteMoves { get; set; } = new();


    private string displayedMove = string.Empty;

    private string _inputValue { get; set; } = string.Empty;
    private string inputValue { get { return _inputValue; } set { _inputValue = value; UpdateAutoCompleteMoves(); } }

    private string inputBoxStyling = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        inputBoxDisabled = !IsGuessable;
        if (!IsGuessable)
        {
            ShowMove();
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        UpdateAutoCompleteMoves();
    }

    public void HandleMoveCheck()
    {
        ShowMove();
        if (IsCorrect())
        {
            SetInputBoxStyle("border-color: lightgreen");
        }
        else
        {
            SetInputBoxStyle("border-color: salmon");
        }
    }

    public void ResetComponent()
    {
        OnInitialized();
        displayedMove = string.Empty;
        inputValue = string.Empty;
        inputBoxStyling = string.Empty;
        StateHasChanged();
    }

    private void ShowMove()
    {
        inputBoxDisabled = true;
        displayedMove = Move;
        StateHasChanged();
    }

    private bool IsCorrect()
    {
        string inputLower = _inputValue.ToLower();
        string moveLower = Move.ToLower();
        return (inputLower == moveLower);
    }

    private void SetInputBoxStyle(string styling)
    {
        inputBoxStyling = styling;
        StateHasChanged();
    }


    private void UpdateAutoCompleteMoves()
    {
        string input = _inputValue.ToLower();
        autoCompleteMoves.Clear();
        foreach(string s in PossibleMoves)
        {
            if (autoCompleteMoves.Count > 6) continue;

            var move = s.ToLower();
            if (move.StartsWith(input))
            {
                autoCompleteMoves.Add(s);
            }
        }
        if (autoCompleteMoves.Count == 1 && _inputValue == autoCompleteMoves.FirstOrDefault()) autoCompleteMoves.Clear();
        StateHasChanged();
    }
}
