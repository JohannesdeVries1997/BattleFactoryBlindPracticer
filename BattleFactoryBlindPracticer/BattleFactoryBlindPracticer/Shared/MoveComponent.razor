@using System.Text.RegularExpressions;
<style>
    .input{

    }
</style>


<input type="text" list="@Move" @bind="BindingValue" @bind:event="oninput" disabled="@InputBoxDisabled" onclick="this.select()" />

<input type="text" value="@DisplayedMove" disabled>

<datalist id="@Move">
    @foreach (string s in AutoCompleteMoves)
    {
        <option>@s</option>
    }
</datalist>


@code {
    [Parameter]
    public bool IsGuessable { get; set; } = false;

    [Parameter]
    public string Move { get; set; } = string.Empty;

    [Parameter]
    public List<string> PossibleMoves { get; set; } = new();

    private List<string> AutoCompleteMoves { get; set; } = new();

    public bool InputBoxDisabled = true;

    public string DisplayedMove = "";

    private string _bindingValue { get; set; } = string.Empty;
    public string BindingValue { get { return _bindingValue; } set { _bindingValue = value; UpdateAutoCompleteMoves(); } }

    public bool IsCorrect()
    {
        return (BindingValue == Move);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        InputBoxDisabled = !IsGuessable;
        if (!IsGuessable)
        {
            ShowMove();
        }
    }

    public void ShowMove()
    {
        DisplayedMove = Move;
    }

    private void UpdateAutoCompleteMoves()
    {
        string input = BindingValue.ToLower();
        AutoCompleteMoves.Clear();
        foreach(string s in PossibleMoves)
        {
            if (AutoCompleteMoves.Count > 6) continue;

            var move = s.ToLower();
            if (move.StartsWith(input))
            {
                AutoCompleteMoves.Add(s);
            }
        }
        StateHasChanged();
    }
}
